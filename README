%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Thanks for your interest in eJason, our experimental implementation of
Jason in Erlang. Here you can find the commands necessary to run a MAS
using eJason (for UBUNTU Linux)

If you have any issues, please feel free to contact me at:
avalor@babel.ls.fi.upm.es
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

To compile eJason sources, just type:

make

This will generate a set of ".beam" files inside "./eJason/ebin".

We also suggest copying into the "agents" folder all ".asl" files,
i.e. all Jason source code files, that will be run. This folder is
included in the path were eJason looks for Jason files.

To start an eJason system, execute the script 'ejason':

./ejason  [-c ContainerName]

where ContainerName is the name of the container that composes the
newly created system. As a matter of example, consider the command:

./ejason -c myContainer

Its execution will generate a container myContainer@userHost, where
userHost is the name of the host where the command was executed.

The ejason script starts an erlang shell invoking the command 'erl'.
Therefore, it accepts any parameter associated to 'erl' (see
http://erlang.org/doc/man/erl.html).

The ejason runtime system (the Distribution Manager and the
Supervision Manager) is started as well. 

----------------------------------------------------------------------------
To obtain the source code of an eJason agent, we must invoke the
following function (for a file named "agentName.asl" in the example):

ejason:parse(agentName).

A new file named "agentName.erl" is generated, which contains the
eJason source code for the agent. This file must be compiled either
from a system shell invoking:

erlc -o ./ebin agentName.erl

Or from the Erlang shell:

c(agentName).

Once it is compiled, the agent can be run by introducing the following
command in an Erlang shell:

ejason:run(agentName).

This agent will always be alive. If we want to stop it, we must call:

ejason:kill(agentName).

If "N" agents with the same name were launched, we can kill all
them by invoking:

ejason:kill(agentName, N).


****** RUNNING TESTS  ****************

Check the README file for each of the tests, as some may require special
start parameters or the start of several Erlang nodes


****** NOTES ON ONGOING WORK  **************

Our implementation of eJason varies the semantics of Jason to include
a new supervision mechamisn and a new distribution mechanism. A formal
semantics of these mechanisms is being developed. Besides, an
informal semantics will soon be available (submitted for review).
