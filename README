%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Thanks for your interest in eJason, our experimental implementation of
Jason in Erlang. Here you can find the commands necessary to run a MAS
using eJason.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

To compile eJason sources, we recommend, first, the creation of a
folder named "ebin" in the same location where eJason sources are
stored.  Then, calling the following command in a shell:

erlc -o ./ebin *.erl

These will generate a set of ".beam" files inside "./ebin".

We also suggest copying into the ebin folder all ".asl" files, i.e. all Jason
source code files.

To obtain the source code of an eJason agent, we must start an Erlang shell
inside "ebin" by invoking:

erl

Then, for a Jason file named "agentName.asl", invoke the following
command in the Erlang shell:

ejason:parse(agentName).

A new file named "agentName.erl" is generated, which contains the
eJason source code for the agent. This file must be compiled either
from a system shell invoking:

erlc -o ./ebin agentName.erl 

Or from the Erlang shell:

c(agentName).

Once it is compiled, the agent can be run by introducing the following
command in an Erlang shell:

ejason:run(agentName).

This agent will always be alive. If we want to stop it, we must call:

ejason:kill(agentName).

If "N" agents with the same name where launched, we can kill all
them by invoking:

ejason:kill(agentName, N).