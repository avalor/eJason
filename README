%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Thanks for your interest in eJason, our experimental implementation of
Jason in Erlang. Here you can find the commands necessary to run a MAS
using eJason (for UBUNTU Linux)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

To compile eJason sources, just type:

./configure

This will generate a set of ".beam" files inside "./eJason/ebin".

We also suggest copying into the ebin folder all ".asl" files, i.e. all Jason
source code files, that will be run.

To start an eJason system, an Erlan shell must be started (including
in the path the address to the compiled .beam files of eJason):

erl -pa eJason/ebin/

Then invoke the following action to start the Distribution Manager and
the Supervision Manager:

ejason:start().

----------------------------------------------------------------------------
To obtain the source code of an eJason agent, we must invoke the
following function (for a file name "agentName.asl" in the example):

ejason:parse(agentName).

A new file named "agentName.erl" is generated, which contains the
eJason source code for the agent. This file must be compiled either
from a system shell invoking:

erlc -o ./ebin agentName.erl

Or from the Erlang shell:

c(agentName).

Once it is compiled, the agent can be run by introducing the following
command in an Erlang shell:

ejason:run(agentName).

This agent will always be alive. If we want to stop it, we must call:

ejason:kill(agentName).

If "N" agents with the same name were launched, we can kill all
them by invoking:

ejason:kill(agentName, N).


****** RUNNING TESTS  ****************

Check the README file for each of the tests, as some may require special
start parameters or the start of several Erlang nodes


****** NOTES ON ONGOING WORK  **************

Our implementation of eJason varies the semantics of Jason to include
a new supervision mechamisn and a new distribution mechanism. A formal
semantics of these mechanisms is being developed. Besides, an
informal semantics will soon be available (submitted for review).